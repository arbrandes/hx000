heat_template_version: 2014-10-16

parameters:
  flavor:
    type: string
    description: Flavor to use for servers
    default: 1C-1GB-20GB
  public_net_id:
    type: string
    description: Public network ID
    default: ext-net
  image:
    type: string
    description: Image ID or name
    default: "Ubuntu 16.04 Xenial Xerus"
  timeout:
    type: number
    description: Timeout for stack creation to finish
    default: 900

resources:
  all_done:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: all_done_handle}
      count: 2
      timeout: {get_param: timeout}

  all_done_handle:
    type: OS::Heat::WaitConditionHandle

  deploy_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        ## users: defines users, sets passwords and SSH authorized keys, and
        ### enables sudo privileges.
        users:
          - default
          - name: training
            gecos: Training User
            groups: users,adm
            ssh-authorized-keys:
              - { get_attr: [ stack_key, public_key ] }
            lock-passwd: false
            shell: /bin/bash
            sudo: ALL=(ALL) NOPASSWD:ALL
        ### write_files: writes arbitrary files
        write_files:
          - path: /etc/hosts
            permissions: '0644'
            content: |
              127.0.0.1 localhost
              192.168.122.100 deploy.example.com deploy
              192.168.122.111 alice.example.com alice
          - path: /home/training/.ssh/id_rsa
            permissions: '0600'
            content: { get_attr: [ stack_key, private_key ] }
          - path: /home/training/.vnc/xstartup
            permissions: '0755'
            content: |
              #!/bin/bash
              xrdb $HOME/.Xresources
              startxfce4 &
          - path: /etc/systemd/system/vncserver@.service
            permissions: '0644'
            content: |
              [Unit]
              Description=Start TightVNC server at startup
              After=syslog.target network.target

              [Service]
              Type=forking
              User=training
              PAMName=login
              PIDFile=/home/training/.vnc/%H:%i.pid
              ExecStartPre=-/usr/bin/vncserver -kill :%i > /dev/null 2>&1
              ExecStart=/usr/bin/vncserver -depth 24 -geometry 860x320 :%i
              ExecStop=/usr/bin/vncserver -kill :%i

              [Install]
              WantedBy=multi-user.target
        ### package_update: refresh package on first boot
        package_update: false
        ### package_upgrade: runs package update on first boot
        package_upgrade: false
        ### packages: installs packages
        packages:
          - screen
          - xfce4
          - xfce4-goodies
          - tightvncserver
        runcmd:
          - cp /etc/skel/.??* /home/training
          - echo "exec /usr/bin/screen -xRR" >> /home/training/.profile
          - mkdir -p /home/training/.vnc
          - str_replace:
              template: echo "%password%" | vncpasswd -f > /home/training/.vnc/passwd
              params:
                "%password%": { get_resource: stack_password }
          - chmod 0700 /home/training/.vnc
          - chmod 0600 /home/training/.vnc/passwd
          - chown -R training:training /home/training
          - systemctl daemon-reload
          - systemctl enable vncserver@1.service
          - systemctl start vncserver@1
          - sleep `bash -c 'echo $[($RANDOM % 10) + 1]'`
          - { get_attr: ['all_done_handle', 'curl_cli'] }

  host_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        ## users: defines users, sets passwords and SSH authorized keys, and
        ### enables sudo privileges.
        users:
          - default
          - name: training
            gecos: Training User
            groups: users,adm
            ssh-authorized-keys:
              - { get_attr: [ stack_key, public_key ] }
            lock-passwd: false
            shell: /bin/bash
            sudo: ALL=(ALL) NOPASSWD:ALL
        ### write_files: writes arbitrary files
        write_files:
          - path: /etc/hosts
            permissions: '0644'
            content: |
              127.0.0.1 localhost
              192.168.122.100 deploy.example.com deploy
              192.168.122.111 alice.example.com alice
          - path: /home/training/.ssh/id_rsa
            permissions: '0600'
            content: { get_attr: [ stack_key, private_key ] }
        ### package_update: refresh package on first boot
        package_update: false
        ### package_upgrade: runs package update on first boot
        package_upgrade: false
        ### packages: installs packages
        packages:
          - screen
        runcmd:
          - cp /etc/skel/.??* /home/training
          - chown -R training:training /home/training
          - sleep `bash -c 'echo $[($RANDOM % 10) + 1]'`
          - { get_attr: ['all_done_handle', 'curl_cli'] }

  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Neutron security group rules
      name: server_security_group
      rules:
      - remote_mode: 'remote_group_id'
        direction: ingress
      - remote_ip_prefix: 0.0.0.0/0
        protocol: tcp
        direction: ingress
        port_range_min: 22
        port_range_max: 22
      - remote_ip_prefix: 0.0.0.0/0
        protocol: tcp
        direction: ingress
        port_range_min: 5901
        port_range_max: 5901
      - remote_ip_prefix: 0.0.0.0/0
        protocol: icmp

  stack_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: 'OS::stack_name' }
      save_private_key: true

  stack_password:
    type: OS::Heat::RandomString
    properties:
      length: 32

  management_net:
    type: OS::Neutron::Net
    properties:
      name: management-net

  management_sub_net:
    type: OS::Neutron::Subnet
    properties:
      name: management-sub-net
      network_id: { get_resource: management_net }
      cidr: 192.168.122.0/24
      gateway_ip: 192.168.122.1
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4
      enable_dhcp: true
      allocation_pools:
        - start: "192.168.122.2"
          end: "192.168.122.50"

  router:
    type: OS::Neutron::Router

  router_gateway:
    type: OS::Neutron::RouterGateway
    properties:
      router_id: { get_resource: router }
      network_id: { get_param: public_net_id }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: management_sub_net }

  deploy:
    type: OS::Nova::Server
    properties:
      name: deploy
      image: { get_param: image }
      flavor: { get_param: flavor }
      user_data:  { get_resource: deploy_config }
      user_data_format: RAW
      networks:
        - port: { get_resource: deploy_management_port }

  deploy_management_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: management_net }
      fixed_ips:
        - ip_address: 192.168.122.100
      security_groups:
        - { get_resource: server_security_group }

  deploy_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: deploy_management_port }
      fixed_ip_address: 192.168.122.100

  alice:
    type: OS::Nova::Server
    properties:
      name: alice
      image: { get_param: image }
      flavor: { get_param: flavor }
      user_data:  { get_resource: host_config }
      user_data_format: RAW
      networks:
        - port: { get_resource: alice_management_port }

  alice_management_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: management_net }
      fixed_ips:
        - ip_address: 192.168.122.111
      security_groups:
        - { get_resource: server_security_group }

outputs:
  public_ip:
    description: Floating IP address of deploy in public network
    value: { get_attr: [ deploy_floating_ip, floating_ip_address ] }
  private_key:
    description: Stack private key
    value: { get_attr: [ stack_key, private_key ] }
  password:
    description: Stack password
    value: { get_resource: stack_password }
